{"version":3,"sources":["../src/lambda.js"],"names":["createAsyncProxy","functionName","filterApp","lambda","Lambda","region","process","env","AWS_REGION","event","context","lambdaFunction","invoke","FunctionName","AWS_LAMBDA_FUNCTION_NAME","replace","InvocationType","Payload","JSON","stringify","promise","statusCode","headers","body","response","get","path","text"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,MAAMA,gBAAgB,GAAG,CAACC,YAAD,EAAeC,SAAf,KAA6B;AAC3D,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAW;AAAEC,IAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAtB,GAAX,CAAf;AACA,SAAO,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC/B,UAAMC,cAAc,GAAG,YAAY;AACjC,YAAMR,MAAM,CAACS,MAAP,CAAc;AAClBC,QAAAA,YAAY,EAAEP,OAAO,CAACC,GAAR,CAAYO,wBAAZ,CAAqCC,OAArC,CAA6C,SAA7C,EAAyD,IAAGd,YAAa,EAAzE,CADI;AAElBe,QAAAA,cAAc,EAAE,OAFE;AAGlBC,QAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeV,KAAf;AAHS,OAAd,EAIHW,OAJG,EAAN;AAKA,aAAO;AACLC,QAAAA,UAAU,EAAE,GADP;AAELC,QAAAA,OAAO,EAAE;AACP,8BAAoBb,KAAK,CAACa,OAAN,CAAc,kBAAd,CADb;AAEP,0BAAgB;AAFT,SAFJ;AAMLC,QAAAA,IAAI,EAAE;AAND,OAAP;AAQD,KAdD;;AAeA,QAAI,CAACrB,SAAL,EAAgB;AACd,aAAOS,cAAc,EAArB;AACD;;AACD,UAAMa,QAAQ,GAAG,MAAM,wBAAQtB,SAAR,EAAmBuB,GAAnB,CAAuBhB,KAAK,CAACiB,IAA7B,CAAvB;;AACA,QAAIF,QAAQ,CAACH,UAAT,KAAwB,GAA5B,EAAiC;AAC/B,aAAOV,cAAc,EAArB;AACD;;AACD,WAAO;AACLU,MAAAA,UAAU,EAAEG,QAAQ,CAACH,UADhB;AAELC,MAAAA,OAAO,EAAEE,QAAQ,CAACF,OAFb;AAGLC,MAAAA,IAAI,EAAEC,QAAQ,CAACG;AAHV,KAAP;AAKD,GA5BD;AA6BD,CA/BM","sourcesContent":["import Lambda from 'aws-sdk/clients/lambda'\nimport request from 'supertest'\n\nexport const createAsyncProxy = (functionName, filterApp) => {\n  const lambda = new Lambda({ region: process.env.AWS_REGION })\n  return async (event, context) => {\n    const lambdaFunction = async () => {\n      await lambda.invoke({\n        FunctionName: process.env.AWS_LAMBDA_FUNCTION_NAME.replace(/-proxy$/, `-${functionName}`),\n        InvocationType: 'Event',\n        Payload: JSON.stringify(event)\n      }).promise()\n      return {\n        statusCode: 200,\n        headers: {\n          'Validation-Token': event.headers['Validation-Token'],\n          'Content-Type': 'text/html'\n        },\n        body: '<!doctype><html><body><script>close()</script><p>Please close this page</p></body></html>'\n      }\n    }\n    if (!filterApp) {\n      return lambdaFunction()\n    }\n    const response = await request(filterApp).get(event.path)\n    if (response.statusCode === 404) {\n      return lambdaFunction()\n    }\n    return {\n      statusCode: response.statusCode,\n      headers: response.headers,\n      body: response.text\n    }\n  }\n}\n"],"file":"lambda.js"}