{"version":3,"sources":["../../src/handlers/postAdded.js"],"names":["postAdded","message","text","body","botId","ownerId","userId","creatorId","groupId","bot","Bot","findByPk","group","getGroup","isPrivateChat","members","length","mentions","some","m","type","id","regex","RegExp","replace","trim","startsWith","rename","substring","attachments","attachment","r","axios","get","contentUri","responseType","setAvatar","data","name"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEO,MAAMA,SAAS,GAAG,MAAMC,OAAN,IAAiB;AACxC,MAAIC,IAAI,GAAGD,OAAO,CAACE,IAAR,CAAaD,IAAxB;;AACA,MAAI,CAACA,IAAL,EAAW;AACT,WADS,CACF;AACR;;AACD,QAAME,KAAK,GAAGH,OAAO,CAACI,OAAtB;AACA,QAAMC,MAAM,GAAGL,OAAO,CAACE,IAAR,CAAaI,SAA5B;;AACA,MAAIH,KAAK,KAAKE,MAAd,EAAsB;AACpB,WADoB,CACb;AACR;;AACD,QAAME,OAAO,GAAGP,OAAO,CAACE,IAAR,CAAaK,OAA7B;AACA,QAAMC,GAAG,GAAG,MAAMC,YAAIC,QAAJ,CAAaP,KAAb,CAAlB;AACA,QAAMQ,KAAK,GAAG,MAAMH,GAAG,CAACI,QAAJ,CAAaL,OAAb,CAApB;AACA,QAAMM,aAAa,GAAGF,KAAK,CAACG,OAAN,CAAcC,MAAd,IAAwB,CAA9C;;AACA,MAAI,CAACF,aAAD,KACFb,OAAO,CAACE,IAAR,CAAac,QAAb,KAA0B,IAA1B,IACA,CAAChB,OAAO,CAACE,IAAR,CAAac,QAAb,CAAsBC,IAAtB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,QAAX,IAAuBD,CAAC,CAACE,EAAF,KAASjB,KAAhE,CAFC,CAAJ,EAGG;AACD;AACD;;AACD,QAAMkB,KAAK,GAAG,IAAIC,MAAJ,CAAY,oBAAmBd,GAAG,CAACY,EAAG,KAAtC,CAAd;AACAnB,EAAAA,IAAI,GAAGA,IAAI,CAACsB,OAAL,CAAaF,KAAb,EAAoB,GAApB,EAAyBG,IAAzB,EAAP;;AACA,MAAIvB,IAAI,CAACwB,UAAL,CAAgB,YAAhB,CAAJ,EAAmC;AACjC,UAAMjB,GAAG,CAACkB,MAAJ,CAAWzB,IAAI,CAAC0B,SAAL,CAAe,EAAf,EAAmBH,IAAnB,EAAX,CAAN;AACA;AACD;;AACD,MAAIvB,IAAI,KAAK,eAAb,EAA8B;AAC5B,QAAI,CAACD,OAAO,CAACE,IAAR,CAAa0B,WAAb,IAA4B,EAA7B,EAAiCb,MAAjC,KAA4C,CAAhD,EAAmD;AACjD;AACD;;AACD,UAAMc,UAAU,GAAG7B,OAAO,CAACE,IAAR,CAAa0B,WAAb,CAAyB,CAAzB,CAAnB;AACA,UAAME,CAAC,GAAG,MAAMC,eAAMC,GAAN,CAAUH,UAAU,CAACI,UAArB,EAAiC;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAjC,CAAhB;AACA,UAAM1B,GAAG,CAAC2B,SAAJ,CAAcL,CAAC,CAACM,IAAhB,EAAsBP,UAAU,CAACQ,IAAjC,CAAN;AACA;AACD;;AACD,SAAO;AAAEpC,IAAAA,IAAF;AAAQU,IAAAA,KAAR;AAAeH,IAAAA,GAAf;AAAoBH,IAAAA,MAApB;AAA4BL,IAAAA,OAAO,EAAEA,OAAO,CAACE;AAA7C,GAAP;AACD,CApCM","sourcesContent":["import axios from 'axios'\n\nimport { Bot } from '../models'\n\nexport const postAdded = async message => {\n  let text = message.body.text\n  if (!text) {\n    return // not a text message\n  }\n  const botId = message.ownerId\n  const userId = message.body.creatorId\n  if (botId === userId) {\n    return // bot should not talk to itself to avoid dead-loop conversation\n  }\n  const groupId = message.body.groupId\n  const bot = await Bot.findByPk(botId)\n  const group = await bot.getGroup(groupId)\n  const isPrivateChat = group.members.length <= 2\n  if (!isPrivateChat && (\n    message.body.mentions === null ||\n    !message.body.mentions.some(m => m.type === 'Person' && m.id === botId)\n  )) {\n    return\n  }\n  const regex = new RegExp(`!\\\\[:Person\\\\]\\\\(${bot.id}\\\\)`)\n  text = text.replace(regex, ' ').trim()\n  if (text.startsWith('__rename__')) {\n    await bot.rename(text.substring(10).trim())\n    return\n  }\n  if (text === '__setAvatar__') {\n    if ((message.body.attachments || []).length === 0) {\n      return\n    }\n    const attachment = message.body.attachments[0]\n    const r = await axios.get(attachment.contentUri, { responseType: 'arraybuffer' })\n    await bot.setAvatar(r.data, attachment.name)\n    return\n  }\n  return { text, group, bot, userId, message: message.body }\n}\n"],"file":"postAdded.js"}